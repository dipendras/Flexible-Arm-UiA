<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{870836e7-c1db-4c5e-9373-286a0440b8b4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR_INPUT
	robot : FB_Robot3R;
	fPosInput : ARRAY [0..2] OF LREAL;
	fVelInput : ARRAY [0..2] OF LREAL;
END_VAR
VAR
	bDelayStart : BOOL := FALSE;
	fbDelayStart : TON := (PT := T#2S);
	
	
	
	t AT %Q* : LREAL;
	A : ARRAY [0..2] OF LREAL;
	w : ARRAY [0..2] OF LREAL;
	TT : ARRAY [0..2] OF LREAL;
	q_Offset : ARRAY [0..2] OF LREAL;
	phi_Offset : ARRAY [0..2] OF LREAL;
	y : ARRAY [0..2] OF LREAL;
	y_t : ARRAY [0..2] OF LREAL;
	u : ARRAY [0..2] OF LREAL;
	j : USINT;
//	i : USINT;
	
	
	timers : ARRAY [0..3] OF TON;
	
	// Task cycle time monitoring
	Ts : LREAL := 0.01;
	fbGetCurrentTaskIdx : GETCURTASKINDEX;
	bCycleTimeExceeded : BOOL;
	nCycleCount : UDINT;

	
	bEStop : BOOL;
	
	bRunStupidRoutine: BOOL;
	
	bVelocityMode : BOOL;
	bPositionMode : BOOL;
	bStop : BOOL;
	
	// IK Data
//	Vt AT %Q* : LREAL := 0.5;
//	radius AT %Q* : LREAL := 0.5;
//	p0 AT %Q* : ARRAY [0..1] OF LREAL := [1.5, 2.5];
//	L  AT %Q* : ARRAY [0..2] OF LREAL := [1.5, 1.5, 1.5];

//	q_t  AT %I* : ARRAY [0..2] OF LREAL;
//	q  AT %I* : ARRAY [0..2] OF LREAL;
	
	
	
//	q_t_DEG : ARRAY [0..2] OF LREAL;
//	q_DEG : ARRAY [0..2] OF LREAL;
	
	deflection : ARRAY [0..2] OF LREAL;
	cumulativeAngle : LREAL;
//	cumulativeVel : LREAL;
	
	//filters
	fbGyroFilters : ARRAY [0..2] OF FB_LowPassFilter;
	fGyroFilterCutoff : ARRAY [0..2] OF LREAL := [ 10.0, 10.0, 10.0 ];
	fLinkGyroVelocity : ARRAY [0..2] OF LREAL;
	stGyroFilterParams : ST_FilterParams;
	bFirstRun : BOOL := TRUE;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bDelayStart THEN
	fbDelayStart(IN := TRUE);
	IF fbDelayStart.Q THEN
		fbDelayStart(IN := FALSE);
		bDelayStart := FALSE;
	END_IF
	RETURN;
END_IF

P_HMI();

stupidRoutine(bRunStupidRoutine:=bRunStupidRoutine);


// Get smaple time from current task
getSampleTime();


	 

robot(
	bEmStop := NOT Safety.TS_I_Safety_EStopOK,
	Ts:=Ts,
	fVelInput:=fVelInput,//u
	fPosInput := fPosInput,
	fJointPositionOffset := Parameters.fJointPositionOffset,
	fJointCalibrationOffset := Parameters.fJointCalibrationOffset
);

IF bFirstRun THEN
	bFirstRun := FALSE;
	FOR j := 0 TO 2 DO
		stGyroFilterParams.fCutoff := fGyroFilterCutoff[j];
		stGyroFilterParams.fDeltaTime := Ts;
		stGyroFilterParams.fInitialValue := 0.0;
		fbGyroFilters[j].init(stParams := stGyroFilterParams);
	END_FOR
END_IF

cumulativeAngle := 0.0;
//cumulativeVel := 0.0;
FOR j := 0 TO 2 DO
	fbGyroFilters[j].update(IMU.fbStim300[j].ImuData.stGyro.x);
	fLinkGyroVelocity[j] := fbGyroFilters[j].fOut;
	IF j > 0 THEN
		fLinkGyroVelocity[j] := fLinkGyroVelocity[j] - fbGyroFilters[j-1].fOut;
	END_IF
	
	cumulativeAngle := cumulativeAngle + robot.q[j];
	deflection[j] := IMU.fbStim300[j].fRollDegFiltered - cumulativeAngle;
END_FOR
]]></ST>
    </Implementation>
    <Action Name="getSampleTime" Id="{503be4e8-d825-4f62-bfd8-9f7ff9c902be}">
      <Implementation>
        <ST><![CDATA[// Get sample time of current task
fbGetCurrentTaskIdx();
bCycleTimeExceeded := _TaskInfo[fbGetCurrentTaskIdx.index].CycleTimeExceeded;
nCycleCount := _TaskInfo[fbGetCurrentTaskIdx.index].CycleCount;
Ts := UDINT_TO_LREAL(_TaskInfo[fbGetCurrentTaskIdx.index].CycleTime/10)/1E6;]]></ST>
      </Implementation>
    </Action>
    <Method Name="stupidRoutine" Id="{c599bf63-7edb-4afa-8510-dcae936441fa}">
      <Declaration><![CDATA[METHOD stupidRoutine : BOOL
VAR_INPUT
	bRunStupidRoutine: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[timers[0](
	IN:=bRunStupidRoutine,
	PT:=T#2S
);

IF timers[0].Q THEN
	Safety.TS_Q_Safety_GroupPort_ErrAck := TRUE;
	
	timers[1](
		IN:=bRunStupidRoutine,
		PT:=T#1S
	);
	
	IF timers[1].Q THEN
		Safety.TS_Q_Safety_GroupPort_ErrAck := FALSE;
		Safety.TS_Q_Safety_EStopRestart := TRUE;
		
		timers[2](
			IN:=bRunStupidRoutine,
			PT:=T#1S
		);
		
		IF timers[2].Q THEN
			Safety.TS_Q_Safety_EStopRestart := FALSE;
			Safety.TS_Q_Safety_Drive_Axis_ErrReset := TRUE;
			
			timers[3](
				IN:=bRunStupidRoutine,
				PT:=T#1S
			);
			
			IF timers[3].Q THEN
				Safety.TS_Q_Safety_Drive_Axis_ErrReset := FALSE;
				
			END_IF
			
		END_IF
		
	END_IF
	
END_IF
	]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="806" Count="0" />
      <LineId Id="809" Count="0" />
      <LineId Id="812" Count="1" />
      <LineId Id="815" Count="0" />
      <LineId Id="814" Count="0" />
      <LineId Id="811" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="807" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="659" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="576" Count="1" />
      <LineId Id="587" Count="1" />
      <LineId Id="1056" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="1057" Count="4" />
      <LineId Id="229" Count="0" />
      <LineId Id="1144" Count="0" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1153" Count="0" />
      <LineId Id="1150" Count="2" />
      <LineId Id="1148" Count="0" />
      <LineId Id="1154" Count="0" />
      <LineId Id="1146" Count="0" />
      <LineId Id="734" Count="0" />
      <LineId Id="729" Count="0" />
      <LineId Id="1160" Count="0" />
      <LineId Id="744" Count="0" />
      <LineId Id="1157" Count="0" />
      <LineId Id="1169" Count="0" />
      <LineId Id="1163" Count="0" />
      <LineId Id="1165" Count="0" />
      <LineId Id="1167" Count="0" />
      <LineId Id="1170" Count="0" />
      <LineId Id="1164" Count="0" />
      <LineId Id="731" Count="1" />
      <LineId Id="222" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.getSampleTime">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.stupidRoutine">
      <LineId Id="6" Count="23" />
      <LineId Id="35" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="30" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>