<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="MAIN" Id="{870836e7-c1db-4c5e-9373-286a0440b8b4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	
	robot : FB_Robot3R;
	
	Kp : LREAL := 0.1;
	
	
	t AT %Q* : LREAL;
	A : ARRAY [0..2] OF LREAL;
	w : ARRAY [0..2] OF LREAL;
	TT : ARRAY [0..2] OF LREAL;
	q_Offset : ARRAY [0..2] OF LREAL;
	phi_Offset : ARRAY [0..2] OF LREAL;
	y : ARRAY [0..2] OF LREAL;
	y_t : ARRAY [0..2] OF LREAL;
	u : ARRAY [0..2] OF LREAL;
	j : USINT;
//	i : USINT;
	
	
	timers : ARRAY [0..3] OF TON;
	
	// Task cycle time monitoring
	Ts : LREAL := 0.01;
	fbGetCurrentTaskIdx : GETCURTASKINDEX;
	bCycleTimeExceeded : BOOL;
	nCycleCount : UDINT;

	
	bEStop : BOOL;
	
	bRunStupidRoutine: BOOL;
	
	
	fPosInput : ARRAY [0..2] OF LREAL;
	fVelInput : ARRAY [0..2] OF LREAL;
	
	bVelocityMode : BOOL;
	bPositionMode : BOOL;
	bStop : BOOL;
	
	// IK Data
	Vt AT %Q* : LREAL := 0.5;
	radius AT %Q* : LREAL := 0.5;
	p0 AT %Q* : ARRAY [0..1] OF LREAL := [1.5, 2.5];
	L  AT %Q* : ARRAY [0..2] OF LREAL := [1.5, 1.5, 1.5];

	q_t  AT %I* : ARRAY [0..2] OF LREAL;
	q  AT %I* : ARRAY [0..2] OF LREAL;
	
	
	
	q_t_DEG : ARRAY [0..2] OF LREAL;
	q_DEG : ARRAY [0..2] OF LREAL;
	
	deflection : ARRAY [0..2] OF LREAL;
	cumulativeAngle : LREAL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
stupidRoutine(bRunStupidRoutine:=bRunStupidRoutine);


// Get smaple time from current task
getSampleTime();


	 


IF NOT Safety.TS_I_Safety_EStopOK THEN
	robot(
		Ts:=Ts,
		eRobotModeCmd := E_RobotMode.EStop,
		fVelInput:=fVelInput,
		fPosInput := fPosInput,
		fJointPositionOffset := Parameters.fJointPositionOffset,
		fJointCalibrationOffset := Parameters.fJointCalibrationOffset
	);
	
ELSIF bVelocityMode AND NOT bPositionMode AND NOT bStop THEN
	// Debug
	t := t + Ts;
	
	A[0] := 5.0;
	TT[0]:= 2;
	q_Offset[0] := 0;
	
	A[1] := 5.0;
	TT[1]:= 2;
	q_Offset[1] := 60;
	

	A[2] := 10.0;
	TT[2]:= 2;
	q_Offset[2] := 45;
	phi_Offset[2] := 90;
	
	FOR j:= 0 TO 2 DO

		w[j] := 2.0*PI/TT[j];
		y[j] := A[j]*SIN(w[j]*t + phi_Offset[j]*PI/180) + q_Offset[j];//start at the angle of 45 degree
		y_t[j] := A[j]*w[j]*COS(w[j]*t + phi_Offset[j]*PI/180);
		u[j] := Kp*(y[j] - robot.q[j]) + y_t[j];	
		
		q_t_DEG[j] := q_t[j]*180/PI;
		q_DEG[j] := q[j]*180/PI;
		
		
		u[j] := Kp*(q_DEG[j] - robot.q[j]) + q_t_DEG[j];
		 
		
	END_FOR
	
	
	// velocity control
	robot(
		Ts:=Ts,
		eRobotModeCmd := E_RobotMode.VELOCITY,
		fVelInput:=u,
		fJointPositionOffset := Parameters.fJointPositionOffset,
		fJointCalibrationOffset := Parameters.fJointCalibrationOffset
	);
ELSIF NOT bVelocityMode AND bPositionMode AND NOT bStop THEN
	robot(
		Ts:=Ts,
		eRobotModeCmd := E_RobotMode.POSITION,
		fVelInput:=fVelInput,
		fPosInput := fPosInput,
		fJointPositionOffset := Parameters.fJointPositionOffset,
		fJointCalibrationOffset := Parameters.fJointCalibrationOffset
	);
ELSE 
	robot(
		Ts:=Ts,
		eRobotModeCmd := E_RobotMode.STOP,
		fVelInput:=fVelInput,
		fPosInput := fPosInput,
		fJointPositionOffset := Parameters.fJointPositionOffset,
		fJointCalibrationOffset := Parameters.fJointCalibrationOffset
	);
END_IF

cumulativeAngle := 0.0;
FOR j := 0 TO 2 DO
	cumulativeAngle := cumulativeAngle + robot.q[j];
	deflection[j] := IMU.fbStim300[j].fRollDeg - cumulativeAngle;
END_FOR
]]></ST>
    </Implementation>
    <Action Name="getSampleTime" Id="{503be4e8-d825-4f62-bfd8-9f7ff9c902be}">
      <Implementation>
        <ST><![CDATA[// Get sample time of current task
fbGetCurrentTaskIdx();
bCycleTimeExceeded := _TaskInfo[fbGetCurrentTaskIdx.index].CycleTimeExceeded;
nCycleCount := _TaskInfo[fbGetCurrentTaskIdx.index].CycleCount;
Ts := UDINT_TO_LREAL(_TaskInfo[fbGetCurrentTaskIdx.index].CycleTime/10)/1E6;]]></ST>
      </Implementation>
    </Action>
    <Method Name="stupidRoutine" Id="{c599bf63-7edb-4afa-8510-dcae936441fa}">
      <Declaration><![CDATA[METHOD stupidRoutine : BOOL
VAR_INPUT
	bRunStupidRoutine: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[timers[0](
	IN:=bRunStupidRoutine,
	PT:=T#2S
);

IF timers[0].Q THEN
	Safety.TS_Q_Safety_GroupPort_ErrAck := TRUE;
	
	timers[1](
		IN:=bRunStupidRoutine,
		PT:=T#1S
	);
	
	IF timers[1].Q THEN
		Safety.TS_Q_Safety_GroupPort_ErrAck := FALSE;
		Safety.TS_Q_Safety_EStopRestart := TRUE;
		
		timers[2](
			IN:=bRunStupidRoutine,
			PT:=T#1S
		);
		
		IF timers[2].Q THEN
			Safety.TS_Q_Safety_EStopRestart := FALSE;
			Safety.TS_Q_Safety_Drive_Axis_ErrReset := TRUE;
			
			timers[3](
				IN:=bRunStupidRoutine,
				PT:=T#1S
			);
			
			IF timers[3].Q THEN
				Safety.TS_Q_Safety_Drive_Axis_ErrReset := FALSE;
				
			END_IF
			
		END_IF
		
	END_IF
	
END_IF
	]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="659" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="576" Count="1" />
      <LineId Id="587" Count="1" />
      <LineId Id="229" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="295" Count="2" />
      <LineId Id="320" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="727" Count="1" />
      <LineId Id="292" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="504" Count="1" />
      <LineId Id="502" Count="1" />
      <LineId Id="500" Count="1" />
      <LineId Id="499" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="494" Count="2" />
      <LineId Id="491" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="489" Count="1" />
      <LineId Id="591" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="599" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="467" Count="1" />
      <LineId Id="231" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="724" Count="1" />
      <LineId Id="237" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="354" Count="4" />
      <LineId Id="719" Count="1" />
      <LineId Id="353" Count="0" />
      <LineId Id="360" Count="5" />
      <LineId Id="722" Count="1" />
      <LineId Id="359" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="734" Count="0" />
      <LineId Id="729" Count="0" />
      <LineId Id="744" Count="0" />
      <LineId Id="735" Count="0" />
      <LineId Id="731" Count="1" />
      <LineId Id="222" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.getSampleTime">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.stupidRoutine">
      <LineId Id="6" Count="23" />
      <LineId Id="35" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="30" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>