<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{870836e7-c1db-4c5e-9373-286a0440b8b4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR_INPUT
	robot : FB_Robot3R;
	fPosInput : ARRAY [0..2] OF LREAL;
	fVelInput : ARRAY [0..2] OF LREAL;	
END_VAR
VAR
	bDelayStart : BOOL := FALSE;
	fbDelayStart : TON := (PT := T#2S);
	
	
	
//	t AT %Q* : LREAL;
//	A : ARRAY [0..2] OF LREAL;
//	w : ARRAY [0..2] OF LREAL;
//	TT : ARRAY [0..2] OF LREAL;
//	q_Offset : ARRAY [0..2] OF LREAL;
//	phi_Offset : ARRAY [0..2] OF LREAL;
//	y : ARRAY [0..2] OF LREAL;
//	y_t : ARRAY [0..2] OF LREAL;
	u : ARRAY [0..2] OF LREAL;
	
	j : USINT;
//	i : USINT;
	
	
	timers : ARRAY [0..3] OF TON;
	
	// Task cycle time monitoring
	Ts : LREAL := 0.01;
	fbGetCurrentTaskIdx : GETCURTASKINDEX;
	bCycleTimeExceeded : BOOL;
	nCycleCount : UDINT;

	
	bEStop : BOOL;
	
	bRunStupidRoutine: BOOL;
	
	bVelocityMode : BOOL;
	bPositionMode : BOOL;
	bStop : BOOL;
	
	// IK Data
//	Vt AT %Q* : LREAL := 0.5;
//	radius AT %Q* : LREAL := 0.5;
//	p0 AT %Q* : ARRAY [0..1] OF LREAL := [1.5, 2.5];
//	L  AT %Q* : ARRAY [0..2] OF LREAL := [1.5, 1.5, 1.5];

//	q_t  AT %I* : ARRAY [0..2] OF LREAL;
//	q  AT %I* : ARRAY [0..2] OF LREAL;
	
	
	
//	q_t_DEG : ARRAY [0..2] OF LREAL;
//	q_DEG : ARRAY [0..2] OF LREAL;
	
	deflection : ARRAY [0..2] OF LREAL;
	cumulativeAngle : ARRAY [0..2] OF LREAL;
//	cumulativeVel : LREAL;



	// Calculate deflection using new approach
	deflectionNew : ARRAY [0..2] OF LREAL;
	
	//filters
	fbGyroFilters : ARRAY [0..2] OF FB_LowPassFilter;
	fGyroFilterCutoff : ARRAY [0..2] OF LREAL := [ 10.0, 10.0, 10.0 ];
	fLinkGyroVelocity : ARRAY [0..2] OF LREAL;
	stGyroFilterParams : ST_FilterParams;
	bFirstRun : BOOL := TRUE;
	
	// Additive torque based on deflection measurement	
	fShaftAdditiveTorque : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0]; // [Nm]
	Kt : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0]; // gain for defelectuib compensation
	bEnableDeflectionCompensation : BOOL := FALSE;
	
	// Additive velocity based on deflection measurement	
	fShaftAdditiveVelocity : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0]; // [Nm]
	
	//filters for velocity feeback
	fbJointVelFilters : ARRAY [0..2] OF FB_LowPassFilter;
	fJointVelFilterCutoff : ARRAY [0..2] OF LREAL := [ 10.0, 10.0, 10.0 ];
	
	q_t_Filtered : ARRAY [0..2] OF LREAL;
	stJointVelFilterParams : ST_FilterParams;
	
	fElasticOscilationVelocity : ARRAY [0..2] OF LREAL;//differene between joint veocity and velocity measured by gyro
	fElasticOscilationVelocityFiltered : ARRAY [0..2] OF LREAL;//differene between joint veocity and velocity measured by gyro
	fElasticOscilationVelocityLast : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0];

	fElasticOscilationAcceleration : ARRAY [0..2] OF LREAL;// d(Vel)/dt
	fElasticOscilationVeloHighPass : ARRAY [0..2] OF LREAL;
	
	//filters for link oscillations feeback
	fbElasticOscilationVelocityFilters : ARRAY [0..2] OF FB_LowPassFilter;
	stElasticOscilationVelocityFilterParams : ARRAY [0..2] OF ST_FilterParams := [
		(	
			eOrder := E_FilterOrder.eSecond,
			fCutoff := 10
		),
		(
			eOrder := E_FilterOrder.eSecond,
			fCutoff := 10
		),
		(
			eOrder := E_FilterOrder.eSecond,
			fCutoff := 10
		)
	];
	
//	nVelocityFeedbackRaw AT %I* : DINT;
//	fVelocityFeedback : LREAL;


//	// implement integrator
//	fVibrationFeedback : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0];
//	Kf : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0]; // gain for defelectuib compensation
//	fIntegrand : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0];
//	fIntegOut : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0];
//	fCompOut : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0];


//	// implement high pass filtering on deflection
//filters for link oscillations feeback
	fbDeflectionFilters : ARRAY [0..2] OF FB_LowPassFilter;
	stDeflectionFilterParams : ARRAY [0..2] OF ST_FilterParams := [
		(	
			eOrder := E_FilterOrder.eSecond,
			fCutoff := 1
		),
		(
			eOrder := E_FilterOrder.eSecond,
			fCutoff := 1
		),
		(
			eOrder := E_FilterOrder.eSecond,
			fCutoff := 1
		)
	];
	fDeflectionHighPass : ARRAY [0..2] OF LREAL;
	fDeflectionLowPassFiltered : ARRAY [0..2] OF LREAL;
	
	//// Calculate deflection using new approach: filters----------------------------------------
	fbDeflectionNewFilters : ARRAY [0..2] OF FB_LowPassFilter;
	fDeflectionNewHighPass : ARRAY [0..2] OF LREAL;
	fDeflectionNewLowPassFiltered : ARRAY [0..2] OF LREAL;//-----------------------------------------
	
	fKf : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0]; // gain for defelectuib compensation
	fShaftAdditiveVelocityTest : ARRAY [0..2] OF LREAL := [0.0, 0.0, 0.0]; 
	
	fCalibrationOffset : ARRAY [0..2] OF LREAL;
	
	
	
	
	//joint acceleration low pass filters
	fbJointAccFilters : ARRAY [0..2] OF FB_LowPassFilter;
	stJointAccFilterParams : ARRAY [0..2] OF ST_FilterParams := [
		(	
			eOrder := E_FilterOrder.eSecond,
			fCutoff := 50
		),
		(
			eOrder := E_FilterOrder.eSecond,
			fCutoff := 50
		),
		(
			eOrder := E_FilterOrder.eSecond,
			fCutoff := 50
		)
	];
	fJointAccLowPassFiltered : ARRAY [0..2] OF LREAL;
	
	//Leica Readings
	fLeicaRawH AT %I*: LREAL; //rad
	fLeicaRawV AT %I*: LREAL; //rad
	fLeicaRawD AT %I*: LREAL; //m
	
	
	//Leica Readings
	fXLeica : LREAL := 0.0; //m
	fYLeica : LREAL := 0.0; //m
	fZLeica : LREAL := 0.0; //m
		

	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bDelayStart THEN
	fbDelayStart(IN := TRUE);
	IF fbDelayStart.Q THEN
		fbDelayStart(IN := FALSE);
		bDelayStart := FALSE;
	END_IF
	RETURN;
END_IF

P_HMI();

stupidRoutine(bRunStupidRoutine:=bRunStupidRoutine);


// Get smaple time from current task
getSampleTime();


IF bFirstRun THEN
	bFirstRun := FALSE;
	FOR j := 0 TO 2 DO
		//initialize Gyro Filters
		stGyroFilterParams.fCutoff := fGyroFilterCutoff[j];
		stGyroFilterParams.fDeltaTime := Ts;
		stGyroFilterParams.fInitialValue := 0.0;
		fbGyroFilters[j].init(stParams := stGyroFilterParams);
		
		//initialize JointVel Filters
		stJointVelFilterParams.fCutoff := fJointVelFilterCutoff[j];
		stJointVelFilterParams.fDeltaTime := Ts;
		stJointVelFilterParams.fInitialValue := 0.0;
		fbJointVelFilters[j].init(stParams := stJointVelFilterParams);
		
		// filters for link oscillations feeback
		stElasticOscilationVelocityFilterParams[j].fDeltaTime := Ts;
		fbElasticOscilationVelocityFilters[j].init(stParams := stElasticOscilationVelocityFilterParams[j]);
		
		//filters for deflection
		stDeflectionFilterParams[j].fDeltaTime := Ts;
		fbDeflectionFilters[j].init(stParams := stDeflectionFilterParams[j]);
		
		
		//filters for deflectionNew
		fbDeflectionNewFilters[j].init(stParams := stDeflectionFilterParams[j]);
		
		//filter for joint acc
		stJointAccFilterParams[j].fDeltaTime := Ts;
		fbJointAccFilters[j].init(stParams := stJointAccFilterParams[j]);
		
	END_FOR
END_IF





// cumulativeAngle[0] := robot.q[0];
//cumulativeVel := 0.0;
FOR j := 0 TO 2 DO
	fbGyroFilters[j].update(IMU.fbStim300[j].ImuData.stGyro.x);
	fLinkGyroVelocity[j] := fbGyroFilters[j].fOut;
	IF j > 0 THEN
		fLinkGyroVelocity[j] := fLinkGyroVelocity[j] - fbGyroFilters[j-1].fOut;
		cumulativeAngle[j] := cumulativeAngle[j-1] + robot.q[j];
	ELSE
		cumulativeAngle[j] := robot.q[j];
	END_IF
	
	deflection[j] := IMU.fbStim300[j].fRollDeg - cumulativeAngle[j];
END_FOR



FOR j := 0 TO 2 DO
	IF j > 0 THEN
		deflectionNew[j] := IMU.fbStim300[j].fRollDeg - (robot.q[j] + IMU.fbStim300[j-1].fRollDeg);
	ELSE
		deflectionNew[j] := IMU.fbStim300[j].fRollDeg - robot.q[j];
	END_IF
	
	//high pass filtering on deflection and removing static deflection terms
	fbDeflectionNewFilters[j].update(deflectionNew[j]);
	fDeflectionNewLowPassFiltered[j] := fbDeflectionNewFilters[j].fOut;
	fDeflectionNewHighPass[j] := deflectionNew[j] - fDeflectionNewLowPassFiltered[j];
	
END_FOR




//calculate additive torque
FOR j := 0 TO 2 DO	
	fbJointVelFilters[j].update(robot.q_t[j]);
	q_t_Filtered[j] := fbJointVelFilters[j].fOut;
	fElasticOscilationVelocity[j] := fLinkGyroVelocity[j] - q_t_Filtered[j];
	fElasticOscilationVelocityFiltered[j] := fbElasticOscilationVelocityFilters[j].update(fElasticOscilationVelocity[j]);
	
	fElasticOscilationAcceleration[j] := (fElasticOscilationVelocityFiltered[j] - fElasticOscilationVelocityLast[j])/Ts;
	fElasticOscilationVelocityLast[j] := fElasticOscilationVelocityFiltered[j];
	
	fElasticOscilationVeloHighPass[j] := fElasticOscilationVelocity[j] - fElasticOscilationVelocityFiltered[j];

(*	
//	// integrator
//	fVibrationFeedback[j] := fElasticOscilationVelocityFiltered[j];
//	//
//	fIntegOut[j] := fIntegOut[j] + q_t_Filtered[j]*fVibrationFeedback[j]*Ts;	
//	fCompOut[j] := -Kf[j]*fVibrationFeedback[j]*fIntegOut[j]; //doesnot work and it is very dangerous to integrate
*)

	//high pass filtering on deflection and removing static deflection terms
	fbDeflectionFilters[j].update(deflection[j]);
	fDeflectionLowPassFiltered[j] := fbDeflectionFilters[j].fOut;
	fDeflectionHighPass[j] := deflection[j] - fDeflectionLowPassFiltered[j];
	
	fShaftAdditiveVelocityTest[j] := -fKf[j]*fDeflectionNewHighPass[j];
	
	
	
	
	
	IF bEnableDeflectionCompensation THEN	
//		fShaftAdditiveTorque[j] := -Kt[j]*fElasticOscilationVelocity[j];
//		fShaftAdditiveVelocity[j] := -Kt[j]*fElasticOscilationVelocityFiltered[j];
//		fShaftAdditiveVelocity[j] := -Kt[j]*fElasticOscilationVeloHighPass[j]; //doesnot work
		
		fShaftAdditiveVelocity[j] := fShaftAdditiveVelocityTest[j];

	ELSE
		fShaftAdditiveTorque[j] := 0.0;
		fShaftAdditiveVelocity[j] := 0.0;	
	END_IF		
END_FOR




robot(
	bEmStop := NOT Safety.TS_I_Safety_EStopOK,
	Ts:=Ts,
	fVelInput:=fVelInput,//u
	fPosInput := fPosInput,
	fShaftAdditiveTorque := fShaftAdditiveTorque,
	fShaftAdditiveVelocity := fShaftAdditiveVelocity,
	stJointParams := Parameters.stJointParams,
	fDeflection := fDeflectionNewLowPassFiltered
//	fJointPositionOffset := Parameters.fJointPositionOffset,
//	fJointCalibrationOffset := Parameters.fJointCalibrationOffset
);

//joint acc filtered
FOR j := 0 TO 2 DO
	fbJointAccFilters[j].update(robot.q_tt[j]);
	fJointAccLowPassFiltered[j] := fbJointAccFilters[j].fOut;
END_FOR


//fVelocityFeedback := TO_LREAL(nVelocityFeedbackRaw)/(CONSTANTS.VELOCITY_SCALING*CONSTANTS.GEAR_RATIO[2]);

FOR j := 0 TO 2 DO
	fCalibrationOffset[j] := IMU.fbStim300[j].fRollDegFiltered - robot.q[j];
	IF (j <> 0) THEN
		fCalibrationOffset[j] := fCalibrationOffset[j] - 90;
	END_IF
END_FOR



//Leica Data
fXLeica := fLeicaRawD*SIN(fLeicaRawV)*COS(fLeicaRawH);
fYLeica := fLeicaRawD*SIN(fLeicaRawV)*SIN(fLeicaRawH);
fZLeica := fLeicaRawD*COS(fLeicaRawV);]]></ST>
    </Implementation>
    <Action Name="getSampleTime" Id="{503be4e8-d825-4f62-bfd8-9f7ff9c902be}">
      <Implementation>
        <ST><![CDATA[// Get sample time of current task
fbGetCurrentTaskIdx();
bCycleTimeExceeded := _TaskInfo[fbGetCurrentTaskIdx.index].CycleTimeExceeded;
nCycleCount := _TaskInfo[fbGetCurrentTaskIdx.index].CycleCount;
Ts := UDINT_TO_LREAL(_TaskInfo[fbGetCurrentTaskIdx.index].CycleTime/10)/1E6;]]></ST>
      </Implementation>
    </Action>
    <Method Name="stupidRoutine" Id="{c599bf63-7edb-4afa-8510-dcae936441fa}">
      <Declaration><![CDATA[METHOD stupidRoutine : BOOL
VAR_INPUT
	bRunStupidRoutine: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[timers[0](
	IN:=bRunStupidRoutine,
	PT:=T#2S
);

IF timers[0].Q THEN
	Safety.TS_Q_Safety_GroupPort_ErrAck := TRUE;
	
	timers[1](
		IN:=bRunStupidRoutine,
		PT:=T#1S
	);
	
	IF timers[1].Q THEN
		Safety.TS_Q_Safety_GroupPort_ErrAck := FALSE;
		Safety.TS_Q_Safety_EStopRestart := TRUE;
		
		timers[2](
			IN:=bRunStupidRoutine,
			PT:=T#1S
		);
		
		IF timers[2].Q THEN
			Safety.TS_Q_Safety_EStopRestart := FALSE;
			Safety.TS_Q_Safety_Drive_Axis_ErrReset := TRUE;
			
			timers[3](
				IN:=bRunStupidRoutine,
				PT:=T#1S
			);
			
			IF timers[3].Q THEN
				Safety.TS_Q_Safety_Drive_Axis_ErrReset := FALSE;
				
			END_IF
			
		END_IF
		
	END_IF
	
END_IF
	]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="806" Count="0" />
      <LineId Id="809" Count="0" />
      <LineId Id="812" Count="1" />
      <LineId Id="815" Count="0" />
      <LineId Id="814" Count="0" />
      <LineId Id="811" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="807" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="659" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="1144" Count="0" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1153" Count="0" />
      <LineId Id="1289" Count="0" />
      <LineId Id="1150" Count="2" />
      <LineId Id="1148" Count="0" />
      <LineId Id="1282" Count="1" />
      <LineId Id="1285" Count="2" />
      <LineId Id="1284" Count="0" />
      <LineId Id="1288" Count="0" />
      <LineId Id="1546" Count="0" />
      <LineId Id="1529" Count="1" />
      <LineId Id="1727" Count="1" />
      <LineId Id="1531" Count="0" />
      <LineId Id="1729" Count="1" />
      <LineId Id="2075" Count="0" />
      <LineId Id="2077" Count="0" />
      <LineId Id="2076" Count="0" />
      <LineId Id="2104" Count="3" />
      <LineId Id="1731" Count="0" />
      <LineId Id="1154" Count="0" />
      <LineId Id="1146" Count="0" />
      <LineId Id="1279" Count="2" />
      <LineId Id="1278" Count="0" />
      <LineId Id="734" Count="0" />
      <LineId Id="729" Count="0" />
      <LineId Id="1160" Count="0" />
      <LineId Id="744" Count="0" />
      <LineId Id="1157" Count="0" />
      <LineId Id="1169" Count="0" />
      <LineId Id="1163" Count="0" />
      <LineId Id="1165" Count="0" />
      <LineId Id="1890" Count="0" />
      <LineId Id="1892" Count="1" />
      <LineId Id="1167" Count="0" />
      <LineId Id="1170" Count="0" />
      <LineId Id="731" Count="1" />
      <LineId Id="1244" Count="0" />
      <LineId Id="2050" Count="2" />
      <LineId Id="2055" Count="0" />
      <LineId Id="2057" Count="3" />
      <LineId Id="2069" Count="0" />
      <LineId Id="2072" Count="2" />
      <LineId Id="2070" Count="1" />
      <LineId Id="2049" Count="0" />
      <LineId Id="2046" Count="2" />
      <LineId Id="1245" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="1247" Count="0" />
      <LineId Id="1290" Count="0" />
      <LineId Id="1294" Count="0" />
      <LineId Id="1291" Count="0" />
      <LineId Id="1295" Count="0" />
      <LineId Id="1551" Count="0" />
      <LineId Id="1557" Count="0" />
      <LineId Id="1555" Count="1" />
      <LineId Id="1689" Count="0" />
      <LineId Id="1692" Count="0" />
      <LineId Id="1690" Count="0" />
      <LineId Id="1669" Count="0" />
      <LineId Id="1685" Count="1" />
      <LineId Id="1673" Count="0" />
      <LineId Id="1671" Count="1" />
      <LineId Id="1695" Count="0" />
      <LineId Id="1694" Count="0" />
      <LineId Id="1696" Count="0" />
      <LineId Id="1732" Count="0" />
      <LineId Id="1697" Count="0" />
      <LineId Id="2293" Count="0" />
      <LineId Id="1698" Count="2" />
      <LineId Id="2038" Count="1" />
      <LineId Id="1693" Count="0" />
      <LineId Id="1292" Count="0" />
      <LineId Id="1266" Count="0" />
      <LineId Id="1513" Count="0" />
      <LineId Id="1691" Count="0" />
      <LineId Id="1687" Count="0" />
      <LineId Id="1735" Count="0" />
      <LineId Id="1734" Count="0" />
      <LineId Id="1269" Count="0" />
      <LineId Id="1517" Count="0" />
      <LineId Id="1270" Count="0" />
      <LineId Id="1267" Count="0" />
      <LineId Id="1248" Count="1" />
      <LineId Id="1387" Count="0" />
      <LineId Id="1391" Count="0" />
      <LineId Id="1390" Count="0" />
      <LineId Id="1253" Count="5" />
      <LineId Id="1518" Count="0" />
      <LineId Id="1888" Count="1" />
      <LineId Id="1259" Count="1" />
      <LineId Id="1246" Count="0" />
      <LineId Id="2114" Count="0" />
      <LineId Id="1880" Count="0" />
      <LineId Id="2108" Count="0" />
      <LineId Id="2112" Count="0" />
      <LineId Id="2115" Count="0" />
      <LineId Id="1881" Count="0" />
      <LineId Id="2113" Count="0" />
      <LineId Id="1505" Count="0" />
      <LineId Id="1882" Count="0" />
      <LineId Id="1509" Count="1" />
      <LineId Id="1887" Count="0" />
      <LineId Id="1883" Count="0" />
      <LineId Id="1885" Count="1" />
      <LineId Id="1884" Count="0" />
      <LineId Id="1511" Count="0" />
      <LineId Id="2485" Count="1" />
      <LineId Id="1512" Count="0" />
      <LineId Id="2487" Count="0" />
      <LineId Id="1506" Count="0" />
      <LineId Id="2488" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.getSampleTime">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.stupidRoutine">
      <LineId Id="6" Count="23" />
      <LineId Id="35" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="30" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>