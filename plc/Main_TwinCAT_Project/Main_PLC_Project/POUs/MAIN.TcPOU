<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="MAIN" Id="{870836e7-c1db-4c5e-9373-286a0440b8b4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	
	robot : FB_Robot3R;
	
	Kp : LREAL := 0.1;
	
	
	t AT %Q* : LREAL;
	A : ARRAY [0..2] OF LREAL;
	w : ARRAY [0..2] OF LREAL;
	TT : ARRAY [0..2] OF LREAL;
	q_Offset : ARRAY [0..2] OF LREAL;
	phi_Offset : ARRAY [0..2] OF LREAL;
	y : ARRAY [0..2] OF LREAL;
	y_t : ARRAY [0..2] OF LREAL;
	u : ARRAY [0..2] OF LREAL;
	j : USINT;
//	i : USINT;
	
	
	timers : ARRAY [0..3] OF TON;
	
	// Task cycle time monitoring
	Ts : LREAL := 0.01;
	fbGetCurrentTaskIdx : GETCURTASKINDEX;
	bCycleTimeExceeded : BOOL;
	nCycleCount : UDINT;

	
	bEStop : BOOL;
	
	bRunStupidRoutine: BOOL;
	
	
	fPosInput : ARRAY [0..2] OF LREAL;
	fVelInput : ARRAY [0..2] OF LREAL;
	
	bVelocityMode : BOOL;
	bPositionMode : BOOL;
	bStop : BOOL;
	
	// IK Data
	Vt AT %Q* : LREAL := 0.5;
	radius AT %Q* : LREAL := 0.5;
	p0 AT %Q* : ARRAY [0..1] OF LREAL := [1.5, 2.5];
	L  AT %Q* : ARRAY [0..2] OF LREAL := [1.5, 1.5, 1.5];

	q_t  AT %I* : ARRAY [0..2] OF LREAL;
	q  AT %I* : ARRAY [0..2] OF LREAL;
	
	
	
	q_t_DEG : ARRAY [0..2] OF LREAL;
	q_DEG : ARRAY [0..2] OF LREAL;
	
	
	//serial communication with el6022
	fbReadStim300 			: FB_ReadStim300;

	x : ARRAY [0..30] OF LREAL;
	raw_data : ARRAY [0..(SIZEOF(tDataFrame)-1)] OF SINT;
	k : UDINT;

	//// try with string
//	OutputStr				: STRING(255);	//Be sure that this is long enough for a complete line of data (Timestamt,Data1,Data2,...)
	
//	//try with bytes data
	OutputData : tDataFrame;

	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// serial communication with el6022
fbReadStim300();

//// try with string----------------------------------------------------------
//IF fbReadStim300.bStringCreated THEN
//	OutputStr := fbReadStim300.OutputStr;
//	FOR k:= 0 TO 64 DO
//		 raw_data[k] := BYTE_TO_SINT((OutputStr[k]));
//		 OutputData[k] := BYTE_TO_SINT((OutputStr[k]));		
//	END_FOR
////-----------------------------------------------------------------------
	
//// try with bytes data	---------------------------------------------------------------------------------------------
IF fbReadStim300.bDataCreated  THEN
	OutputData := fbReadStim300.OutputData;
	FOR k:= 0 TO (SIZEOF(tDataFrame)-1) DO
		 raw_data[k] := BYTE_TO_SINT(OutputData[k]);		
	END_FOR
////-----------------------------------------------------------------------	
	// Rate (Gyro) X,Y,Z,Status 2^14
	x[0] := (raw_data[1]*EXPT(2,16) + raw_data[2]*EXPT(2,8) + raw_data[3]*EXPT(2,0))/EXPT(2,14);
	x[1] := (raw_data[4]*EXPT(2,16) + raw_data[5]*EXPT(2,8) + raw_data[6]*EXPT(2,0))/EXPT(2,14);
	x[2] := (raw_data[7]*EXPT(2,16) + raw_data[8]*EXPT(2,8) + raw_data[9]*EXPT(2,0))/EXPT(2,14);
	x[3] := OutputData[10]; //Status byte

	// Acc X,Y,Z,Status Assumes range 10g --> 2^19
	x[4] := (raw_data[11]*EXPT(2,16) + raw_data[12]*EXPT(2,8) + raw_data[13]*EXPT(2,0))/EXPT(2,19);
	x[5] := (raw_data[14]*EXPT(2,16) + raw_data[15]*EXPT(2,8) + raw_data[16]*EXPT(2,0))/EXPT(2,19);
	x[6] := (raw_data[17]*EXPT(2,16) + raw_data[18]*EXPT(2,8) + raw_data[19]*EXPT(2,0))/EXPT(2,19);
	x[7] := OutputData[20]; //Status byte
	
	
	// Incl X,Y,Z,Status. 2^22 
	x[8] := (raw_data[21]*EXPT(2,16) + raw_data[22]*EXPT(2,8) + raw_data[23]*EXPT(2,0))/EXPT(2,22);
	x[9] := (raw_data[24]*EXPT(2,16) + raw_data[25]*EXPT(2,8) + raw_data[26]*EXPT(2,0))/EXPT(2,22);
	x[10] := (raw_data[27]*EXPT(2,16) + raw_data[28]*EXPT(2,8) + raw_data[29]*EXPT(2,0))/EXPT(2,22);
	x[11] := OutputData[30]; //Status byte
	
	// Gyro Temp X,Y,Z,Status. 2^8 
	x[12] := (raw_data[31]*EXPT(2,8) + raw_data[32]*EXPT(2,0))/EXPT(2,8);
	x[13] := (raw_data[33]*EXPT(2,8) + raw_data[34]*EXPT(2,0))/EXPT(2,8);
	x[14] := (raw_data[35]*EXPT(2,8) + raw_data[36]*EXPT(2,0))/EXPT(2,8);
	x[15] := OutputData[37]; //Status byte
	
	
	// Acc Temp X,Y,Z,Status. 2^8 
	x[16] := (raw_data[38]*EXPT(2,8) + raw_data[39]*EXPT(2,0))/EXPT(2,8);
	x[17] := (raw_data[40]*EXPT(2,8) + raw_data[41]*EXPT(2,0))/EXPT(2,8);
	x[18] := (raw_data[42]*EXPT(2,8) + raw_data[43]*EXPT(2,0))/EXPT(2,8);
	x[19] := OutputData[44]; //Status byte
	
	// Incl Temp X,Y,Z,Status. 2^8 
	x[20] := (raw_data[45]*EXPT(2,8) + raw_data[46]*EXPT(2,0))/EXPT(2,8);
	x[21] := (raw_data[47]*EXPT(2,8) + raw_data[48]*EXPT(2,0))/EXPT(2,8);
	x[22] := (raw_data[49]*EXPT(2,8) + raw_data[50]*EXPT(2,0))/EXPT(2,8);
	x[23] := OutputData[51]; //Status byte
	

	// AUX Output (External signal, IF ANY)
    x[24] := OutputData[52]; // Aux BYTE 1
    x[25] := OutputData[53]; // Aux BYTE 2
    x[26] := OutputData[54]; // Aux BYTE 3
    x[27] := OutputData[55]; // Status BYTE
	
    // Counter, Latency and CRC
    x[28] := OutputData[56]; // Counter [0-255]
    x[29] := (OutputData[57]*EXPT(2,8) + OutputData[58]*EXPT(2,0)); // Latency (microseconds)
    x[30] := (OutputData[59]*EXPT(2,32) + OutputData[60]*EXPT(2,16) + OutputData[61]*EXPT(2,8) + OutputData[62]*EXPT(2,0)); // Checksum VERIFY???
	
	
END_IF




stupidRoutine(bRunStupidRoutine:=bRunStupidRoutine);


// Get smaple time from current task
getSampleTime();


	 


IF NOT Safety.TS_I_Safety_EStopOK THEN
	robot(
		Ts:=Ts,
		eRobotModeCmd := E_RobotMode.EStop,
		fVelInput:=fVelInput,
		fPosInput := fPosInput
	);
	
ELSIF bVelocityMode AND NOT bPositionMode AND NOT bStop THEN
	// Debug
	t := t + Ts;
	
	A[0] := 5.0;
	TT[0]:= 2;
	q_Offset[0] := 0;
	
	A[1] := 5.0;
	TT[1]:= 2;
	q_Offset[1] := 60;
	

	A[2] := 10.0;
	TT[2]:= 2;
	q_Offset[2] := 45;
	phi_Offset[2] := 90;
	
	FOR j:= 0 TO 2 DO

		w[j] := 2.0*PI/TT[j];
		y[j] := A[j]*SIN(w[j]*t + phi_Offset[j]*PI/180) + q_Offset[j];//start at the angle of 45 degree
		y_t[j] := A[j]*w[j]*COS(w[j]*t + phi_Offset[j]*PI/180);
		u[j] := Kp*(y[j] - robot.q[j]) + y_t[j];	
		
		q_t_DEG[j] := q_t[j]*180/PI;
		q_DEG[j] := q[j]*180/PI;
		
		
		u[j] := Kp*(q_DEG[j] - robot.q[j]) + q_t_DEG[j];
		 
		
	END_FOR
	
	
	// velocity control
	robot(
		Ts:=Ts,
		eRobotModeCmd := E_RobotMode.VELOCITY,
		fVelInput:=u
	);
ELSIF NOT bVelocityMode AND bPositionMode AND NOT bStop THEN
	robot(
	Ts:=Ts,
	eRobotModeCmd := E_RobotMode.POSITION,
	fVelInput:=fVelInput,
	fPosInput := fPosInput
	);
ELSE 
	robot(
	Ts:=Ts,
	eRobotModeCmd := E_RobotMode.STOP,
	fVelInput:=fVelInput,
	fPosInput := fPosInput
	);
END_IF
]]></ST>
    </Implementation>
    <Action Name="getSampleTime" Id="{503be4e8-d825-4f62-bfd8-9f7ff9c902be}">
      <Implementation>
        <ST><![CDATA[// Get sample time of current task
fbGetCurrentTaskIdx();
bCycleTimeExceeded := _TaskInfo[fbGetCurrentTaskIdx.index].CycleTimeExceeded;
nCycleCount := _TaskInfo[fbGetCurrentTaskIdx.index].CycleCount;
Ts := UDINT_TO_LREAL(_TaskInfo[fbGetCurrentTaskIdx.index].CycleTime/10)/1E6;]]></ST>
      </Implementation>
    </Action>
    <Method Name="stupidRoutine" Id="{c599bf63-7edb-4afa-8510-dcae936441fa}">
      <Declaration><![CDATA[METHOD stupidRoutine : BOOL
VAR_INPUT
	bRunStupidRoutine: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[timers[0](
	IN:=bRunStupidRoutine,
	PT:=T#2S
);

IF timers[0].Q THEN
	Safety.TS_Q_Safety_GroupPort_ErrAck := TRUE;
	
	timers[1](
		IN:=bRunStupidRoutine,
		PT:=T#1S
	);
	
	IF timers[1].Q THEN
		Safety.TS_Q_Safety_GroupPort_ErrAck := FALSE;
		Safety.TS_Q_Safety_EStopRestart := TRUE;
		
		timers[2](
			IN:=bRunStupidRoutine,
			PT:=T#1S
		);
		
		IF timers[2].Q THEN
			Safety.TS_Q_Safety_EStopRestart := FALSE;
			Safety.TS_Q_Safety_Drive_Axis_ErrReset := TRUE;
			
			timers[3](
				IN:=bRunStupidRoutine,
				PT:=T#1S
			);
			
			IF timers[3].Q THEN
				Safety.TS_Q_Safety_Drive_Axis_ErrReset := FALSE;
				
			END_IF
			
		END_IF
		
	END_IF
	
END_IF
	]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="314" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="888" Count="0" />
      <LineId Id="887" Count="0" />
      <LineId Id="669" Count="0" />
      <LineId Id="671" Count="0" />
      <LineId Id="683" Count="0" />
      <LineId Id="695" Count="0" />
      <LineId Id="1040" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="967" Count="0" />
      <LineId Id="885" Count="1" />
      <LineId Id="890" Count="0" />
      <LineId Id="892" Count="2" />
      <LineId Id="889" Count="0" />
      <LineId Id="701" Count="1" />
      <LineId Id="700" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="705" Count="1" />
      <LineId Id="704" Count="0" />
      <LineId Id="708" Count="3" />
      <LineId Id="707" Count="0" />
      <LineId Id="712" Count="1" />
      <LineId Id="715" Count="3" />
      <LineId Id="714" Count="0" />
      <LineId Id="719" Count="0" />
      <LineId Id="721" Count="5" />
      <LineId Id="728" Count="0" />
      <LineId Id="732" Count="0" />
      <LineId Id="729" Count="2" />
      <LineId Id="727" Count="0" />
      <LineId Id="720" Count="0" />
      <LineId Id="734" Count="3" />
      <LineId Id="733" Count="0" />
      <LineId Id="740" Count="0" />
      <LineId Id="749" Count="0" />
      <LineId Id="748" Count="0" />
      <LineId Id="741" Count="3" />
      <LineId Id="750" Count="0" />
      <LineId Id="745" Count="2" />
      <LineId Id="738" Count="1" />
      <LineId Id="699" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="661" Count="0" />
      <LineId Id="660" Count="0" />
      <LineId Id="658" Count="1" />
      <LineId Id="249" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="576" Count="1" />
      <LineId Id="587" Count="1" />
      <LineId Id="229" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="295" Count="2" />
      <LineId Id="320" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="504" Count="1" />
      <LineId Id="502" Count="1" />
      <LineId Id="500" Count="1" />
      <LineId Id="499" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="494" Count="2" />
      <LineId Id="491" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="489" Count="1" />
      <LineId Id="591" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="599" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="467" Count="1" />
      <LineId Id="231" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="354" Count="4" />
      <LineId Id="353" Count="0" />
      <LineId Id="360" Count="5" />
      <LineId Id="359" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="222" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.getSampleTime">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.stupidRoutine">
      <LineId Id="6" Count="23" />
      <LineId Id="35" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="30" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>