<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="FB_ReadStim300" Id="{85aab605-d932-4106-b3ef-6d4e1a471faf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ReadStim300
VAR_INPUT
END_VAR
VAR_OUTPUT
////	//check with string -------------------------------------------------------------------
//	OutputStr 			: STRING(255);
//	bStringCreated		: BOOL := FALSE;
////	//-------------------------------------------------------------------------------------
	
	//check with bytes --------------------------------------------------------------------
	OutputData : tDataFrame;
	bDataCreated : BOOL := FALSE;
	//-------------------------------------------------------------------------------------
	
END_VAR
VAR
	// Common for both string and bytes
	ComTimer			: TON := (PT:=T#1S);
	iComState			: INT := 0;

	bReceiveBusy		: BOOL;
	eReceiveError		: ComError_t;
	bReceiveTimeout		: BOOL;
	
//	//check with string -------------------------------------------------------------------
//	fbSendString			: SendString;
//	fbReceiveString			: ReceiveString;	
//	sReceivedString		: STRING(255);
//	bStringReceived		: BOOL;
//	//nReceiveCounter		: UDINT := 0;	

//	//--------------------------------------------------------------------------------------
	
//	//check with bytes --------------------------------------------------------------------	
	fbSendData		: SendData;
	pTXData : tDataFrame;
	nLengthSendData : UDINT;
	
	
	fbReceiveData		: ReceiveData;	
	byPrefix : BYTE; //Identifier of the datagram For normal mode datagram -> 0xAF
	byLengthPrefix : BYTE; // 1 byte
	ptSuffix : ARRAY [0..1] OF BYTE; //Termination CR followed by LF
	byLengthSuffix : BYTE; // 2 bytes
	pRXData : tDataFrame;
	nDataFrameSize : UDINT := SIZEOF(tDataFrame); //length of the normal data frame is 65 bytes // CHECK ==========================================================
	
	
	bDataReceived : BOOL;
	nLenReceiveData : UDINT;
	
	bCorrectDataFrameReceived : BOOL;
	
	k : UDINT;
	//--------------------------------------------------------------------------------------
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
ComTimer();


////check with string -------------------------------------------------------------------
//CASE iComState OF
//	1: //Send request for measurement to Stim300
//		bStringCreated := FALSE;
//		OutputStr :='';
		
////		fbSendString(SendString:='X$R', TXbuffer:= IO.TxBufferEL);
		
//		IF fbSendString.Busy = FALSE THEN
//			ComTimer(IN := TRUE);		//Set receive timeout timer to 1s
//			iComState := 2;
//		END_IF
		
//	2: //Receive mesurement from Stim300
//		fbReceiveString(
//			Prefix:= '$AF',//CHR(16#AF),
//			Suffix:= '$R$N',
//			Timeout:= T#1S,
//			ReceivedString:= sReceivedString,
//			RXbuffer:=IO.RxBufferEL,
//			StringReceived=> bStringReceived,
//			Busy=> bReceiveBusy,
//			Error=> eReceiveError,
//			RxTimeout=> bReceiveTimeout );


//		IF bStringReceived THEN
//			OutputStr := sReceivedString;//LEFT(sReceivedString,8);//LEFT(sReceivedString,8);		//Only include first 8 bytes (sign + value)
//			//nReceiveCounter := nReceiveCounter + 1;
//			ComTimer(IN := FALSE);
//			iComState := 3;
//		END_IF
		
//		IF ComTimer.Q THEN
//			OutputStr := 'NaN';
//			ComTimer(IN := FALSE);
//			iComState :=3;
//		END_IF
	
//	3: 
//		bStringCreated := TRUE;
//		iComState := 1;
//		RETURN;
//END_CASE

//////------------------------------------------------------------------------------------------------------------


// // check with bytes --------------------------------------------------------------------

CASE iComState OF
	0:
		FOR k := 0 TO (SIZEOF(tDataFrame)-1) DO
		 	OutputData[k] := 0;	// zero value	
		END_FOR
		iComState:=1;
	1: //Send request for measurement to Stim300 is not necessary
		bDataCreated := FALSE;	
		
		fbSendData(pSendData:=ADR(pTXData), Length:= nLengthSendData, TXbuffer:= IO.TxBufferEL);
		
		IF fbSendData.Busy = FALSE THEN
			ComTimer(IN := TRUE);		//Set receive timeout timer to 1s
			iComState := 2;
		END_IF
		
	2: //Receive mesurement from Stim300
		byPrefix := ASC('$AF');//16#AF;//ASC('$AF');		// Wait for Normal Mode Full Datagram starts with identifier 0xAF --
		byLengthPrefix:= 1;
		ptSuffix[0] := ASC('$R');
		ptSuffix[1] := ASC('$N');
		byLengthSuffix:= 2;
		
		fbReceiveData(
			pPrefix:=ADR(byPrefix),
			LenPrefix := byLengthPrefix,
			pSuffix := ADR(ptSuffix),
			LenSuffix := byLengthSuffix,
			pReceiveData := ADR(pRXData),
			SizeReceiveData := SIZEOF(tDataFrame),//(nDataFrameSize+1),//at least twice??
			Timeout := T#1S,
			DataReceived => bDataReceived, 
			Busy => bReceiveBusy,
			Error => eReceiveError,
			RxTimeout => bReceiveTimeout,
			LenReceiveData => nLenReceiveData,
			RXbuffer := IO.RxBufferEL);
			
			
			bCorrectDataFrameReceived := FALSE;
			 IF bDataReceived AND nLenReceiveData = nDataFrameSize AND pRXData[0] = byPrefix AND pRXData[nDataFrameSize-2] = ptSuffix[0] AND pRXData[nDataFrameSize-1] = ptSuffix[1] THEN
				 bCorrectDataFrameReceived := TRUE;
			 END_IF
	
	
		
		IF bCorrectDataFrameReceived THEN
			memset(ADR(OutputData), 0, (SIZEOF(pRXData)));
			memcpy(ADR(OutputData),ADR(pRXData),(nDataFrameSize));
//			OutputData := pRXData;
			//nReceiveCounter := nReceiveCounter + 1;			
			ComTimer(IN := FALSE);
			iComState := 3;
//		ELSE
//			FOR k := 0 TO (SIZEOF(tDataFrame)-1) DO
//		 		OutputData[k] := 0;	// zero value	
//			END_FOR
//			iComState := 3;
		END_IF
		
		
		IF ComTimer.Q THEN
			FOR k := 0 TO (SIZEOF(tDataFrame)-1) DO
		 		OutputData[k] := 0;	// zero value	
			END_FOR
			ComTimer(IN := FALSE);
			iComState :=1;
		END_IF
	
	3: 
		bDataCreated := TRUE;
		iComState := 1;
		RETURN;
END_CASE
	//-------------------------------------------------------------------------------------]]></ST>
    </Implementation>
    <LineIds Name="FB_ReadStim300">
      <LineId Id="25" Count="1" />
      <LineId Id="344" Count="1" />
      <LineId Id="27" Count="23" />
      <LineId Id="269" Count="0" />
      <LineId Id="53" Count="18" />
      <LineId Id="346" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="551" Count="0" />
      <LineId Id="553" Count="1" />
      <LineId Id="552" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="121" Count="8" />
      <LineId Id="209" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="354" Count="1" />
      <LineId Id="212" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="181" Count="4" />
      <LineId Id="188" Count="4" />
      <LineId Id="195" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="415" Count="1" />
      <LineId Id="420" Count="0" />
      <LineId Id="419" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="143" Count="1" />
      <LineId Id="357" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="145" Count="2" />
      <LineId Id="543" Count="0" />
      <LineId Id="558" Count="1" />
      <LineId Id="557" Count="0" />
      <LineId Id="547" Count="0" />
      <LineId Id="148" Count="1" />
      <LineId Id="542" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="151" Count="8" />
      <LineId Id="73" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>